
{
	"logger": {},
	"fontBaseName": "typography-icons",
	"destCss": "dist/fonts",
	"destScss": "src/stylesheets/typography",
	"destSass": "dist/fonts",
	"destLess": "dist/fonts",
	"destStyl": "dist/fonts",
	"dest": "dist/fonts",
	"relativeFontPath": "/fonts/",
	"addHashes": true,
	"addLigatures": false,
	"template": "src/icons/.nice-icons.tmpl.scss",
	"syntax": "bem",
	"templateOptions": {},
	"stylesheets": [
		"scss"
	],
	"htmlDemo": false,
	"styles": [
		"font",
		"icon"
	],
	"types": [
		"eot",
		"woff2",
		"woff",
		"ttf",
		"svg"
	],
	"order": [
		"eot",
		"woff2",
		"woff",
		"ttf",
		"svg"
	],
	"embed": [],
	"engine": "node",
	"autoHint": false,
	"codepoints": [
		"f101",
		"f102",
		"f103",
		"f104",
		"f105",
		"f106",
		"f107",
		"f108",
		"f109",
		"f10a",
		"f10b"
	],
	"startCodepoint": 61697,
	"ie7": false,
	"normalize": true,
	"optimize": false,
	"round": 10000000000000,
	"fontHeight": 512,
	"descent": 64,
	"version": false,
	"cache": "C:\\Users\\iroutledge\\Documents\\Dev\\NICE-Experience\\node_modules\\grunt-webfont\\.cache",
	"customOutputs": [
		{
			"template": "src/icons/.nice-icons.tmpl.js",
			"dest": "dist/docs/fonts/nice-icons.json"
		}
	],
	"execMaxBuffer": 204800,
	"fontName": "typography-icons",
	"destCssPaths": {
		"css": "dist/fonts",
		"scss": "src/stylesheets/typography",
		"sass": "dist/fonts",
		"less": "dist/fonts",
		"styl": "dist/fonts"
	},
	"destHtml": "dist/fonts",
	"fontfaceStyles": true,
	"baseStyles": true,
	"extraStyles": false,
	"files": [
		"src/icons/evidence.svg",
		"src/icons/facebook-square.svg",
		"src/icons/guidance.svg",
		"src/icons/linkedin-square.svg",
		"src/icons/logo-name.svg",
		"src/icons/logo.svg",
		"src/icons/pathways.svg",
		"src/icons/standards.svg",
		"src/icons/syndication.svg",
		"src/icons/twitter-square.svg",
		"src/icons/youtube-square.svg"
	],
	"glyphs": [
		"evidence",
		"facebook-square",
		"guidance",
		"linkedin-square",
		"logo-name",
		"logo",
		"pathways",
		"standards",
		"syndication",
		"twitter-square",
		"youtube-square"
	],
	"hash": "54c7fb69bb176ccb8f885d9415b1dd77",
	"fontFilename": "nice-icons",
	"fontFamilyName": "NICE Icons",
	"fontSrc1": "url(\"/fonts/nice-icons.eot?54c7fb69bb176ccb8f885d9415b1dd77\")",
	"fontSrc2": "url(\"/fonts/nice-icons.eot?#iefix\") format(\"embedded-opentype\"),\n\t\turl(\"/fonts/nice-icons.woff2?54c7fb69bb176ccb8f885d9415b1dd77\") format(\"woff2\"),\n\t\turl(\"/fonts/nice-icons.woff?54c7fb69bb176ccb8f885d9415b1dd77\") format(\"woff\"),\n\t\turl(\"/fonts/nice-icons.ttf?54c7fb69bb176ccb8f885d9415b1dd77\") format(\"truetype\"),\n\t\turl(\"/fonts/nice-icons.svg?54c7fb69bb176ccb8f885d9415b1dd77#typography-icons\") format(\"svg\")",
	"fontRawSrcs": [
		[
			"url(\"/fonts/nice-icons.eot?54c7fb69bb176ccb8f885d9415b1dd77\")"
		],
		[
			"url(\"/fonts/nice-icons.eot?#iefix\") format(\"embedded-opentype\")",
			"url(\"/fonts/nice-icons.woff2?54c7fb69bb176ccb8f885d9415b1dd77\") format(\"woff2\")",
			"url(\"/fonts/nice-icons.woff?54c7fb69bb176ccb8f885d9415b1dd77\") format(\"woff\")",
			"url(\"/fonts/nice-icons.ttf?54c7fb69bb176ccb8f885d9415b1dd77\") format(\"truetype\")",
			"url(\"/fonts/nice-icons.svg?54c7fb69bb176ccb8f885d9415b1dd77#typography-icons\") format(\"svg\")"
		]
	],
	"cssTemplate": {
		"filename": "C:\\Users\\iroutledge\\Documents\\Dev\\NICE-Experience\\src\\icons\\.nice-icons.tmpl.scss",
		"template": "////\n/// @group Icons\n////\n\n<%\n// This is a template for generating SASS for our icon font.\n// It generates:\n//  - A SASS map of icon name -> codepoint\n//  - A function for getting a codepoint from a name\n//  - A mixin\n//  - A BEM style class for each icon\n%>\n\n/* Generated by grunt-webfont */\n\n<%\n// See https://css-tricks.com/snippets/css/using-font-face/#article-header-id-0\n// for cross-browser font face rule\n%>\n\n$${ fontBaseName }-no-cache: random(999999999);\n\n/// Base path for loading font files\n/// Override this in your application if your path differs.\n/// E.g. if you want to replace it off a CDN you could change this to 'http://cdn.com/fonts/'\n$nice-font-base-path: '${ relativeFontPath }' !default;\n\n@font-face {\n  font-family: \"${ fontFamilyName }\";\n  font-style: normal;\n  font-weight: normal;\n  src: ${ fontSrc1.replace(new RegExp(hash + \"\\\"\", \"g\"), \"\\\" + $\" + fontBaseName + \"-no-cache\").replace(/\"\\/fonts\\//g, \"$nice-font-base-path + \\\"\") };\n  src: ${ fontSrc2.replace(new RegExp(hash + \"\\\"\", \"g\"), \"\\\" + $\" + fontBaseName + \"-no-cache\").replace(/\"\\/fonts\\//g, \"$nice-font-base-path + \\\"\").replace(new RegExp(hash + \"#\", \"g\"), \"\\\" + $\" + fontBaseName + \"-no-cache + \\\"#\") };\n}\n\n/// Map of icon name to codepoint.\n/// This map avoids the use of 'magic strings' for codepoints throught SASS code. The map is usually not used directly - use the nice-icon function/mixin instead.\n/// Please note - the values for codepoints are not fixed and may change each time the font is re-generated.\n<% _.forEach(glyphs, function(glyph, index) { %>/// @prop {string} ${ glyph } [${ codepoints[index] }] - <span class=\"icon icon--${ glyph }\" aria-hidden=\"true\"></span>\n<% }); %>\n$nice-icons: (\n  <% _.forEach(glyphs, function(glyph, index) { %>${ glyph }: \"${ codepoints[index] }\"<% if (index < glyphs.length - 1) { %>,\n  <% } %><% }); %>\n) !default;\n\n/// Base styles required for an icon including font family etc\n/// @example\n///   .test {\n///     @icnlude icon-base;\n///\n///     &:before {\n///       content: nice-icon(search);\n///     }\n///   }\n@mixin icon-base {\n  display: inline-block;\n  font-family: '${ fontFamilyName }';\n  font-style: normal;\n  font-weight: normal;\n  line-height: 1;\n  speak: none;\n  text-decoration: inherit;\n  text-rendering: auto;\n  text-transform: none;\n  vertical-align: baseline;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n/// Applies the required styles for the given icon\n/// including the codepoint.\n/// @param {string} $icon - The name of the icon\n/// @throws Error when the given icon doesn't exist\n/// @example\n///   .search-icon {\n///     @include nice-icon(search);\n///   }\n@mixin nice-icon($icon) {\n  @if map-has-key($nice-icons, $icon) {\n    @include icon-base;\n    content: nice-icon($icon);\n  } @else {\n    @error 'Icons with name #{ $icon } could not be found in the $nice-icons map';\n  }\n}\n\n/// Function for getting the codepoint for a given icon, for use\n/// within the `content` property of psuedo elements.\n/// @example\n///   .test {\n///     @icnlude icon-base;\n///\n///     &:before {\n///       content: nice-icon(search);\n///     }\n///   }\n@function nice-icon($icon) {\n  @if map-has-key($nice-icons, $icon) {\n    $icon-code: map-get($nice-icons, $icon);\n    @return unquote('\\'\\\\#{ $icon-code }\\'');\n  } @else {\n    @error 'Icons with name #{ $icon } could not be found in the $nice-icons map';\n  }\n}\n\n/// Class for rendering an icon.\n/// Use with a named modifier for an icon.\n/// @example\n///   <span class=\"icon icon--search\" aria-hidden=\"true\"></span>\n.icon {\n  @include icon-base;\n\n  &:before {\n    display: block;\n  }\n\n  @each $icon, $code in $nice-icons {\n    &--#{ $icon }:before {\n      content: nice-icon($icon);\n    }\n  }\n}\n"
	},
	"iconsStyles": true,
	"stylesheet": "scss"
}
