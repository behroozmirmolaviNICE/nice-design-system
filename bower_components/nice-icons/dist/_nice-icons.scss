////
/// @group Icons
////



// Generated by grunt-webfont



$nice-icons-no-cache: random(999999999);

/// Base path for loading font files
/// Override this in your application if your path differs.
/// E.g. if you want to replace it off a CDN you could change this to 'http://cdn.com/fonts/'
$nice-font-base-path: '/fonts/' !default;

@font-face {
  font-family: "NICE Icons";
  font-style: normal;
  font-weight: normal;
  src: url($nice-font-base-path + "nice-icons.eot?" + $nice-icons-no-cache);
  src: url($nice-font-base-path + "nice-icons.eot?#iefix") format("embedded-opentype"),
		url($nice-font-base-path + "nice-icons.woff2?" + $nice-icons-no-cache) format("woff2"),
		url($nice-font-base-path + "nice-icons.woff?" + $nice-icons-no-cache) format("woff"),
		url($nice-font-base-path + "nice-icons.ttf?" + $nice-icons-no-cache) format("truetype"),
		url($nice-font-base-path + "nice-icons.svg?" + $nice-icons-no-cache + "#nice-icons") format("svg");
}

/// Map of icon name to codepoint.
/// This map avoids the use of 'magic strings' for codepoints throught SASS code. The map is usually not used directly - use the nice-icon function/mixin instead.
/// Please note - the values for codepoints are not fixed and may change each time the font is re-generated.
/// @prop {string} comment [f101] - <span class="icon icon--comment" aria-hidden="true"></span>
/// @prop {string} evidence [f102] - <span class="icon icon--evidence" aria-hidden="true"></span>
/// @prop {string} facebook-square [f103] - <span class="icon icon--facebook-square" aria-hidden="true"></span>
/// @prop {string} guidance [f104] - <span class="icon icon--guidance" aria-hidden="true"></span>
/// @prop {string} linkedin-square [f105] - <span class="icon icon--linkedin-square" aria-hidden="true"></span>
/// @prop {string} logo-name [f106] - <span class="icon icon--logo-name" aria-hidden="true"></span>
/// @prop {string} logo [f107] - <span class="icon icon--logo" aria-hidden="true"></span>
/// @prop {string} pathways [f108] - <span class="icon icon--pathways" aria-hidden="true"></span>
/// @prop {string} standards [f109] - <span class="icon icon--standards" aria-hidden="true"></span>
/// @prop {string} syndication [f10a] - <span class="icon icon--syndication" aria-hidden="true"></span>
/// @prop {string} twitter-square [f10b] - <span class="icon icon--twitter-square" aria-hidden="true"></span>
/// @prop {string} youtube-square [f10c] - <span class="icon icon--youtube-square" aria-hidden="true"></span>

$nice-icons: (
  comment: "f101",
  evidence: "f102",
  facebook-square: "f103",
  guidance: "f104",
  linkedin-square: "f105",
  logo-name: "f106",
  logo: "f107",
  pathways: "f108",
  standards: "f109",
  syndication: "f10a",
  twitter-square: "f10b",
  youtube-square: "f10c"
) !default;

/// Base styles required for an icon including font family etc
/// @example
///   .test {
///     @icnlude icon-base;
///
///     &:before {
///       content: nice-icon(search);
///     }
///   }
@mixin icon-base {
  display: inline-block;
  font-family: 'NICE Icons';
  font-style: normal;
  font-weight: normal;
  line-height: 1;
  speak: none;
  text-decoration: inherit;
  text-rendering: auto;
  text-transform: none;
  vertical-align: baseline;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/// Applies the required styles for the given icon
/// including the codepoint.
/// @param {string} $icon - The name of the icon
/// @throws Error when the given icon doesn't exist
/// @example
///   .search-icon {
///     @include nice-icon(search);
///   }
@mixin nice-icon($icon) {
  @if map-has-key($nice-icons, $icon) {
    @include icon-base;
    content: nice-icon($icon);
  } @else {
    @error 'Icons with name #{ $icon } could not be found in the $nice-icons map';
  }
}

/// Function for getting the codepoint for a given icon, for use
/// within the `content` property of psuedo elements.
/// @example
///   .test {
///     @icnlude icon-base;
///
///     &:before {
///       content: nice-icon(search);
///     }
///   }
@function nice-icon($icon) {
  @if map-has-key($nice-icons, $icon) {
    $icon-code: map-get($nice-icons, $icon);
    @return unquote('\'\\#{ $icon-code }\'');
  } @else {
    @error 'Icons with name #{ $icon } could not be found in the $nice-icons map';
  }
}

/// Class for rendering an icon.
/// Use with a named modifier for an icon.
/// @example
///   <span class="icon icon--search" aria-hidden="true"></span>
.icon {
  @include icon-base;

  &:before {
    display: block;
  }

  @each $icon, $code in $nice-icons {
    &--#{ $icon }:before {
      content: nice-icon($icon);
    }
  }
}
