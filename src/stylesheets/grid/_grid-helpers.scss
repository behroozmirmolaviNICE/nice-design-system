////
/// @group grid
////

/// Grid mixin for applying to custom classes when creating a custom component
/// and creating 'semantic' (sensible) class names.
///
/// @param {boolean} $reverse [false] Whether the grid items flow the opposite way to their natural source order
/// @param {boolean} $gutterless [false] Whether the grid has no spacing
/// @param {boolean} $compact [false] Whether the grid has compact spacing
/// @param {boolean} $loose [false] Whether the grid has loose spacing
/// @param {boolean} $right [false] Whether to render items from the right instead of the left
/// @param {boolean} $center [false] Whether the grid's items are centrally aligned horizontally
/// @param {boolean} $debug [false] Whether to put a highlight round the grid for debugging
/// @require {mixin} grid-reverse
/// @require {mixin} grid-gutterless
/// @require {mixin} grid-right
/// @require {mixin} grid-center
/// @require {mixin} grid-debug
/// @example scss SCSS usage
///   .test {
///     @include grid($compact: true);
///
///     @include element('item') {
///       @include grid-item;
///       background: red;
///       width: 100%;
///     }
///
///     @include mq($from: md) {
///       @include element('item') {
///         background: green;
///         width: percentage(3 / 12);
///       }
///     }
///   }
/// @example html HTML usage
///   <div class="test">
///     <div class="test__item">item</div>
///   </div>
/// @since 0.1.0
@mixin grid($reverse: false, $gutterless: false, $compact: false, $loose: false, $right: false, $center: false, $debug: false) {
  letter-spacing: -.31em; // Remove whitespace caused by `inline-block` elements
  list-style: none; // Allow the grid system to be used on lists.
  margin: 0; // Remove any margins that might affect the grid system.
  margin-left: -$nice-grid-gutter; // Apply a negative `margin-left` to negate the columnsâ€™ gutters.
  padding: 0; // Remove any paddings that might affect the grid system.

  @if $reverse {
    @include grid-reverse;
  }

  @if $gutterless {
    @include grid-gutterless;
  }

  @if $compact {
    @include grid-compact;
  }

  @if $loose {
    @include grid-loose;
  }

  @if $right {
    @include grid-right;
  }

  @if $center {
    @include grid-center;
  }

  @if $debug {
    @include grid-debug;
  }
}

/// Reversed grids allow you to structure your source in the opposite order to how
/// your rendered layout will appear
/// @since 0.1.0
@mixin grid-reverse {
  direction: rtl;
  text-align: left;
}

/// Gutterless grids have all the properties of regular grids, minus any spacing
/// @see grid-item-gutterless
/// @since 0.1.0
@mixin grid-gutterless {
  margin-left: 0;
}

/// Compact grids have a smaller gutter
/// @see grid-item-compact
/// @since 0.2.10
@mixin grid-compact {
  margin-left: -$nice-grid-gutter-compact;
}

/// Loose grids have a smaller gutter
/// @see grid-item-compact
/// @since 0.2.10
@mixin grid-loose {
  margin-left: -$nice-grid-gutter-loose;
}

/// Align the entire grid to the right
/// @since 0.1.0
@mixin grid-right {
  text-align: right;
}

/// Centered grids align grid items centrally without needing to use push or pull classes
/// @since 0.1.0
@mixin grid-center {
  text-align: center;
}

/// Debug a grid by putting a highlight round it
/// @see grid-item-debug
/// @since 0.1.0
@mixin grid-debug {
  outline: 4px dashed red;
}

/// Grid item
/// @param {boolean} $gutterless [false] Whether the grid has no spacing
/// @param {boolean} $compact [false] Whether the grid has compact spacing
/// @param {boolean} $loose [false] Whether the grid has loose spacing
/// @param {boolean} $middle [false] Whether the grid item is vertically aligned to the middle
/// @param {boolean} $bottom [false] Whether the grid item is vertically aligned to the bottom
/// @param {boolean} $debug [false] Whether to put a highlight round the grid item for debugging
/// @param {map} $breakpoints [null] A map of breakpoints and the width/parameters for the grid item
/// @require {mixin} grid-item-gutterless
/// @require {mixin} grid-item-middle
/// @require {mixin} grid-item-bottom
/// @require {mixin} grid-item-debug
/// @require mq <https://github.com/sass-mq/sass-mq>
/// @example scss
///   .test {
///     width: 100%;
///     @include grid-item($breakpoints: ( md: ( width: 50%, push: 25% ), lg: 20% ));
///   }
/// @since 0.1.0
@mixin grid-item($gutterless: false, $compact: false, $loose: false, $middle: false, $bottom: false, $debug: false, $breakpoints: null) {
  @include border-box;
  direction: ltr;
  display: inline-block;
  letter-spacing: normal;
  padding-left: $nice-grid-gutter;
  position: relative;
  text-align: left;
  vertical-align: top;
  width: 100%;
  word-spacing: normal;

  @if $gutterless {
    @include grid-item-gutterless;
  }

  @if $compact {
    @include grid-item-compact;
  }

  @if $loose {
    @include grid-item-loose;
  }

  @if $middle {
    @include grid-item-middle;
  }

  @if $bottom {
    @include grid-item-bottom;
  }

  // Output any breakpoint overrides passed in via the map
  @if $breakpoints {
    @each $breakpoint-key, $values in $breakpoints {

      @if is-percentage($values) {
        @include mq($from: $breakpoint-key) {
          width: $values;
        }
      } @else {

        $width: map-get($values, width);
        $push: map-get($values, push);
        $pull: map-get($values, pull);

        @if $push and not is-percentage($push) {
          @error 'Expected push to be a percentage but found `#{$push}`';
        }

        @if $pull and not is-percentage($pull) {
          @error 'Expected pull to be a percentage but found `#{$pull}`';
        }

        @include mq($from: $breakpoint-key) {
          width: $width;

          @if $push {
            left: $push;
          }

          @if $pull {
            right: $pull;
          }
        }
      }
    }
  }
}

/// Gutterless grids have all the properties of regular grids, minus any spacing.
/// @since 0.1.0
@mixin grid-item-gutterless {
  padding-left: 0;
}

/// Compact grid item with a smaller gutter
/// @since 0.2.10
@mixin grid-item-compact {
  padding-left: $nice-grid-gutter-compact;
}

/// Loose grid item with a larger gutter
/// @since 0.2.10
@mixin grid-item-loose {
  padding-left: $nice-grid-gutter-loose;
}

/// Align grid cell vertically to the middle
/// @since 0.1.0
@mixin grid-item-middle {
  vertical-align: middle;
}

/// Align grid cell vertically to the bottom
/// @since 0.1.0
@mixin grid-item-bottom {
  vertical-align: bottom;
}

/// Debug a grid item by putting a highlight round it
/// @see grid-debug
/// @since 0.1.0
@mixin grid-item-debug {
  outline: 2px dashed blue;
}
